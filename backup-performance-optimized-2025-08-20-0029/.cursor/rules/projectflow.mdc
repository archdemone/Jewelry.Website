---
alwaysApply: true
---

ðŸš¦ Master Rulebook v2 (Frontend + Backend + Workflow)
1) Performance & Web Vitals

Targets: LCP < 2.5s, TBT < 300ms, CLS < 0.1, FCP < 1.8s.

Hero (LCP)

First slide is server-rendered and visible at load (no JS-gated LCP).

<Image priority sizes="100vw" fill|width/height> with real dimensions; WebP/AVIF and aim â‰¤ 200KB.

Do not add manual <link rel="preload"> for the same image if priority is set.

Fonts: next/font (preloaded automatically), display: "swap".

JS/CSS:

Lazy-load non-critical UI with next/dynamic (and ssr: false only for truly client-only widgets).

Keep critical CSS minimal; avoid layout shifts (reserve space for images/components).

3rd-party scripts: Use <Script strategy="afterInteractive"> for needed scripts; lazyOnload for analytics; avoid beforeInteractive unless essential.

Budgets (align with repo):

First Load JS (route): â‰¤ 2,000 kB gzip

Vendor bundle: â‰¤ 1,500 kB

React bundle: â‰¤ 500 kB

Common chunk: â‰¤ 300 kB

2) Frontend Code Hygiene & Accessibility

Only mark files "use client" when required.

Prefer direct imports; keep barrel files small (preserve tree-shaking). Support path aliases via tsconfig.json.

All interactive elements are accessible (labels, roles, focus states). No content shifts on interaction.

3) Backend/API (Next.js App Router)

Runtime: Prefer Edge/Node appropriately; heavy libs stay on Node runtime.

Caching: Use revalidate/tags and cache: 'no-store' or force-cache explicitly; avoid accidental caching of HTML.

Security:

Validate env at boot (e.g., Zod) and fail fast if missing.

Never expose secrets to client bundles.

Cookies: HttpOnly, Secure (in prod), SameSite=Lax or Strict as needed.

Security headers (CSP, X-Frame-Options, X-Content-Type-Options) via next.config.js or middleware.

Compression: Handled by platform/proxy; donâ€™t add custom compression middleware inside Next unless self-hosting raw Node.

4) Service Worker & Assets

SW scoping: Baseline uses /sw.js (port 3000), Sandbox uses /sw-sandbox.js (port 3001) with separate caches/scopes. Never cache HTML as cache-first.

Images: Configure images.remotePatterns correctly; serve static from /public or a trusted domain.

5) Environments & Secrets

Local: .env.local (baseline), sandbox has its own env and runs with SANDBOX=1.

CI/Prod: Secrets stored in GitHub/host secret store. No .env.production in Git.

6) Workflow (Sandbox â€¢ Dev â€¢ Prod â€¢ Promotion)

Local dev (safe): npm run dev:safe â†’ baseline prod on :3000; sandbox dev on :3001 (Turbopack off).

Prod parity/perf: npm run run:both â†’ build + next start on :3000/:3001.

Promotion (never copy files manually): sandbox npm run sandbox:patch â†’ main npm run sandbox:apply â†’ commit.

Stop/Status: npm run stop to free ports; npm run status must show 200/200.

7) CI (already provided)

Steps: npm ci â†’ type-check:strict â†’ lint â†’ build â†’ start on port 4000 â†’ smoke /:200 and /api/healthz:200.

On failure: tail server log; do not mute checks.

8) Pre-merge checks (must pass)

npm run type-check:strict, npm run lint, npm run build.

Local sandbox prod smoke: / and /api/healthz return 200 and logs contain no Error/Unhandled/TypeError.

Size-limits respected (the budgets above).